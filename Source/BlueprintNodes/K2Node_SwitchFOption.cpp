// Fill out your copyright notice in the Description page of Project Settings.

#include "K2Node_SwitchFOption.h"

// KismetCompiler
#include "KismetCompiler.h"

// BlueprintGraph
#include "K2Node_CallFunction.h"

// UnrealEd
#include "Kismet2/BlueprintEditorUtils.h"

// Engine
#include "Kismet/BlueprintMapLibrary.h"

#define LOCTEXT_NAMESPACE "SwitchFOption"

FText UK2Node_SwitchFOption::GetMenuCategory() const
{
    return LOCTEXT("NodeMenu", "Interaction");
}

void UK2Node_SwitchFOption::GetMenuActions(FBlueprintActionDatabaseRegistrar& ActionRegistrar) const
{
    UClass* ActionKey = GetClass();
    if (ActionRegistrar.IsOpenForRegistration(ActionKey))
    {
        UBlueprintNodeSpawner* NodeSpawner = UBlueprintNodeSpawner::Create(GetClass());
        check(NodeSpawner != nullptr);

        ActionRegistrar.AddBlueprintAction(ActionKey, NodeSpawner);
    }
}

void UK2Node_SwitchFOption::AllocateDefaultPins()
{
    const UEdGraphSchema_K2* K2Schema = GetDefault<UEdGraphSchema_K2>();

    // Inputs
    UEdGraphNode::FCreatePinParams PinParams;
    CreatePin(EGPD_Input, K2Schema->PC_Exec, K2Schema->PN_Execute);
    UEdGraphPin* InValuePin = CreatePin(EGPD_Input, K2Schema->PC_Wildcard, FName(TEXT("Value")), PinParams);
    K2Schema->SetPinAutogeneratedDefaultValueBasedOnType(InValuePin);
    UEdGraphPin* InArrayPin = CreatePin(EGPD_Input, K2Schema->PC_Wildcard, FName(TEXT("Options")));
    InArrayPin->PinType.ContainerType = EPinContainerType::Array;
    InArrayPin->PinType.bIsConst = true;
    InArrayPin->PinType.bIsReference = true;

    Super::AllocateDefaultPins();
}

FText UK2Node_SwitchFOption::GetNodeTitle(ENodeTitleType::Type TitleType) const
{
    return LOCTEXT("NodeTitle_NONE", "Switch on Option (Exec)");
}

#undef LOCTEXT_NAMESPACE